package edu.etu.web.server;

import edu.etu.web.client.GreetingService;
import edu.etu.web.shared.Customer;
import edu.etu.web.shared.FieldVerifier;

import java.util.ArrayList;
import java.util.List;

import com.gargoylesoftware.htmlunit.javascript.host.Map;
import com.google.gwt.dev.util.collect.HashMap;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;

import cern.colt.Arrays;

/**
 * The server-side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class GreetingServiceImpl extends RemoteServiceServlet implements GreetingService {
	private HashMap<String, List<Customer>> db = null;
	public String greetServer(String input) throws IllegalArgumentException {
		// Verify that the input is valid. 
		if (!FieldVerifier.isValidName(input)) {
			// If the input is not valid, throw an IllegalArgumentException back to
			// the client.
			throw new IllegalArgumentException("Name must be at least 4 characters long");
		}

		String serverInfo = getServletContext().getServerInfo();
		String userAgent = getThreadLocalRequest().getHeader("User-Agent");

		// Escape data from the client to avoid cross-site script vulnerabilities.
		input = escapeHtml(input);
		userAgent = escapeHtml(userAgent);

		return "Hello, " + input + "!<br><br>I am running " + serverInfo + ".<br><br>It looks like you are using:<br>"
				+ userAgent;
	}

	/**
	 * Escape an html string. Escaping data received from the client helps to
	 * prevent cross-site script vulnerabilities.
	 * 
	 * @param html the html string to escape
	 * @return the escaped string
	 */
	private String escapeHtml(String html) {
		if (html == null) {
			return null;
		}
		return html.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");
	}

	@Override
	public List<String> getCustomerList() {
		// TODO Auto-generated method stub
		/*if( db == null ){ initDB(); }
		String[] tmp = new String[db.keySet().size()];
		db.keySet().toArray(tmp);
		return (List<String>) java.util.Arrays.asList(tmp);*/
		return null;
	}

	@Override
	public List<Customer> getShopReaderList(String readerFIO) {
		// TODO Auto-generated method stub
		if( db == null ){ initDB(); }
		return db.get(readerFIO);
	}
	
	private void initDB(){
		db = new HashMap<String, List<Customer>>();
		List<Customer> entries1 = new ArrayList<Customer>();
		entries1.add(new Customer("Яблоки", "120", true));
		entries1.add(new Customer("Груши", "200", true));
		entries1.add(new Customer("Виноград", "150", false));
		db.put("Иванов И. И.", entries1);
		List<Customer> entries2 = new ArrayList<Customer>();
		entries2.add(new Customer("Соль", "10", false));
		entries2.add(new Customer("Сахар", "60", true));
		db.put("Петров П.П.", entries2);
		List<Customer> entries3 = new ArrayList<Customer>();
		entries3.add(new Customer("Молоко", "70", false));
		entries3.add(new Customer("Сливки", "90", true));
		db.put("Кац И.М.", entries3);
	}
}
