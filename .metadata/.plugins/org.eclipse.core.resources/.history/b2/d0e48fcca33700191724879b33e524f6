package edu.etu.web.client;

import edu.etu.web.shared.Customer;
import edu.etu.web.shared.FieldVerifier;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.KeyCodes;
import com.google.gwt.event.dom.client.KeyUpEvent;
import com.google.gwt.event.dom.client.KeyUpHandler;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.DialogBox;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.MultiWordSuggestOracle;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;

/**
 * Entry point classes define <code>onModuleLoad()</code>.
 */
public class Lab7 implements EntryPoint {
	/**
	 * The message displayed to the user when the server cannot be reached or
	 * returns an error.
	 */
	private static final String SERVER_ERROR = "An error occurred while "
			+ "attempting to contact the server. Please check your network " + "connection and try again.";
	private static final String SRV_ERR = "Ошибка сервера! ";
	private static final String SRV_ERR_GET_CUSTOMER_LIST = "Невозможно получить список покупателей.";
	private static final String SRV_ERR_GET_SHOP_LIST = "Невозможно получить список покупок покупателя.";
	private static final String GET_CUSTOMER_LIST_BTN = "Получить список покупок";
	private static final String CLOSE_BTN = "Закрыть";
	private static final String SHOPLIST_WND_TITLE = "Список покупок покупателя ";

	/**
	 * Create a remote service proxy to talk to the server-side Greeting service.
	 */
	private final GreetingServiceAsync greetingService = GWT.create(GreetingService.class);

	/**
	 * This is the entry point method.
	 */
	public void onModuleLoad() {
		final Button sendButton = new Button(GET_CUSTOMER_LIST_BTN);
		final MultiWordSuggestOracle oracle = new MultiWordSuggestOracle();
		final ListBox nameField = new ListBox();
		final Label errorLabel = new Label();

		// We can add style names to widgets
		sendButton.addStyleName("sendButton");

		// Add the nameField and sendButton to the RootPanel
		// Use RootPanel.get() to get the entire body element
		RootPanel.get("nameFieldContainer").add(nameField);
		RootPanel.get("sendButtonContainer").add(sendButton);
		RootPanel.get("errorLabelContainer").add(errorLabel);

		// Focus the cursor on the name field when the app loads
		nameField.setFocus(true);

		//GREETINGSERVICE

		// Create the popup dialog box
		final DialogBox dialogBox = new DialogBox();
		dialogBox.setText(SHOPLIST_WND_TITLE);
		dialogBox.setAnimationEnabled(true);
		final Button closeButton = new Button(CLOSE_BTN);
		// We can set the id of a widget by accessing its Element
		closeButton.getElement().setId("closeButton");
		final Label textToServerLabel = new Label();
		final HTML serverResponseLabel = new HTML();
		VerticalPanel dialogVPanel = new VerticalPanel();
		
		final CellTable<Customer> table = createCellTable();
		dialogVPanel.add(table);
		
		dialogVPanel.addStyleName("dialogVPanel");
		dialogVPanel.add(new HTML("<b>Sending name to the server:</b>"));
		dialogVPanel.add(textToServerLabel);
		dialogVPanel.add(new HTML("<br><b>Server replies:</b>"));
		dialogVPanel.add(serverResponseLabel);
		dialogVPanel.setHorizontalAlignment(VerticalPanel.ALIGN_RIGHT);
		dialogVPanel.add(closeButton);
		dialogBox.setWidget(dialogVPanel);

		// Add a handler to close the DialogBox
		closeButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				dialogBox.hide();
				sendButton.setEnabled(true);
				sendButton.setFocus(true);
			}
		});

		// Create a handler for the sendButton and nameField
		class MyHandler implements ClickHandler, KeyUpHandler {
			/**
			 * Fired when the user clicks on the sendButton.
			 */
			public void onClick(ClickEvent event) {
				sendNameToServer();
			}

			/**
			 * Fired when the user types in the nameField.
			 */
			public void onKeyUp(KeyUpEvent event) {
				if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) {
					sendNameToServer();
				}
			}

			/**
			 * Send the name from the nameField to the server and wait for a response.
			 */
			private void sendNameToServer() {
				// First, we validate the input.
				errorLabel.setText("");
				String textToServer = nameField.getValue(nameField.getSelectedIndex());
				if (!FieldVerifier.isValidName(textToServer)) {
					errorLabel.setText("Логин покупателя не должен быть меньше 4-х букв.");
					return;
				}
				
				if(textToServer == null) {
					errorLabel.setText("Логин покупателя не должен быть меньше 4-х букв.");
					return;
				}

				// Then, we send the input to the server.
				sendButton.setEnabled(false);
				textToServerLabel.setText(textToServer);
				serverResponseLabel.setText("");
				greetingService.greetServer(textToServer, new AsyncCallback<String>() {
					public void onFailure(Throwable caught) {
						// Show the RPC error message to the user
						dialogBox.setText(SRV_ERR);
						serverResponseLabel.addStyleName("serverResponseLabelError");
						serverResponseLabel.setHTML(SRV_ERR + SRV_ERR_GET_SHOP_LIST);
						dialogBox.center();
						closeButton.setFocus(true);
					}

					public void onSuccess(String result) {
						dialogBox.setText(SHOPLIST_WND_TITLE + textToServer);
						/////////////////////////////////////
						table.setRowCount(result.length(), true);
						//table.setRowData(0, result);
						serverResponseLabel.removeStyleName("serverResponseLabelError");
						serverResponseLabel.setHTML(result);
						dialogBox.center();
						closeButton.setFocus(true);
					}
				});
			}
		}

		// Add a handler to send the name to the server
		MyHandler handler = new MyHandler();
		sendButton.addClickHandler(handler);
		nameField.addKeyUpHandler(handler);
	}
	
	private CellTable<Customer> createCellTable() {
		final CellTable<Customer> table = new CellTable<Customer>();
		table.setKeyboardSelectionPolicy(KeyboardSelectionPolicy.ENABLED);
			TextColumn<Customer> authorColumn = new TextColumn<Customer>() {
				public String getValue(Customer object) {
				return object.getName();
			}
		};
		table.addColumn(authorColumn, "Название товара");
		TextColumn<Customer> titleColumn = new TextColumn<Customer>() {
			public String getValue(Customer object) {
				return object.getPrice();
			}
		};
		table.addColumn(titleColumn, "Цена");
		TextColumn<Customer> isReadColumn = new TextColumn<Customer>() {
			public String getValue(Customer object) {
				return object.isSale() ? "Да":"Нет";
			}
		};
		table.addColumn(isReadColumn, "Скидка");
		return table;
	}
}
